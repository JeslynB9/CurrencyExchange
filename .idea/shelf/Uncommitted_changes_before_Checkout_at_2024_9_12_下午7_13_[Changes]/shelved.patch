Index: app/src/main/java/CurrencyExchange/PrintSummaryUI.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package CurrencyExchange;\n\nimport processing.core.PApplet;\nimport processing.core.PImage;\n\nimport CurrencyExchange.Users.Dropdown;\nimport CurrencyExchange.Users.CurrencyManager;\nimport java.time.LocalDate;\nimport java.time.format.DateTimeFormatter;\n\npublic class PrintSummaryUI {\n    PApplet parent;\n    PImage switchImg;\n    PImage dropdownFirst;\n    PImage dropdownSecond;\n    PImage unSelectedConvert;\n    PImage unSelectedPopular;\n    Flag flagManager;\n    CurrencyManager currencyManager;\n\n    static int width = 1920 / 2;\n    static int height = 1080 / 2;\n    float rectW = width-100;\n    float rectH = height/2;\n    float cornerRadius = 10;\n    float rectX;\n    float rectY;\n\n    Dropdown firstDropdown;\n    Dropdown secondDropdown;\n\n    // Canvas center\n    int centerX = width/2;\n    int centerY = height/2;\n\n    // Shadow offset\n    float shadowOffsetX = 10;\n    float shadowOffsetY = 10;\n\n    // Draw the shadow all around (slightly larger than the rectangle)\n    float shadowOffset = 8;\n\n    boolean firstCurrencyBox = false;\n    boolean secondCurrencyBox = false;\n    boolean startDateBox = false;\n    boolean endDateBox = false;\n    String selectedFirstCurrencyText = \"USD - US Dollar\"; // Default currency\n    String selectedSecondCurrencyText = \"EUR - Euros\";   // Default currency\n    String selectedFirstCurrency = \"USD\";\n    String selectedSecondCurrency = \"EUR\";\n\n    String enteredStartDate = \"\"; // User input for start date\n    String enteredEndDate = \"\";\n\n    // Constructor receives the PApplet instance\n    public PrintSummaryUI(PApplet parent, CurrencyManager currencyManager) {\n        this.parent = parent;\n        this.currencyManager = currencyManager;\n        flagManager = new Flag(parent);\n\n        // Load flags for selected currencies\n        flagManager.loadFlag(selectedFirstCurrency);\n        flagManager.loadFlag(selectedSecondCurrency);\n\n        // Calculate the rectangle's top-left corner based on the center\n        rectX = width / 2 - rectW / 2;\n        rectY = height / 2 - rectH / 2;\n//        System.out.println(\"PrintSummaryUI initialized\");\n\n        // Load the image\n        switchImg = parent.loadImage(\"src/main/resources/switch.png\");\n        switchImg.resize(1920 / 40, 1080 / 40);\n\n        dropdownFirst = parent.loadImage(\"src/main/resources/dropdown.png\");\n        dropdownFirst.resize(1920 / 80, 1080 / 80);\n\n        dropdownSecond = parent.loadImage(\"src/main/resources/dropdown.png\");\n        dropdownSecond.resize(1920 / 80, 1080 / 80);\n\n        unSelectedConvert = parent.loadImage(\"src/main/resources/convert-not-selected.png\");\n        unSelectedConvert.resize(1920 / 40, 1080 / 40);\n\n        unSelectedPopular = parent.loadImage(\"src/main/resources/popular-not-selected.png\");\n        unSelectedPopular.resize(1920 / 40, 1080 / 40);\n\n        String[] countries = { \"USD - US Dollar\", \"EUR - Euro\", \"AUD - AU Dollar\", \"GBP - British Pound\", \"JPY - JP Yen\" };\n        firstDropdown = new Dropdown(parent, countries, 80, 250, 200, 40);\n        secondDropdown = new Dropdown(parent, countries, 325, 250, 200, 40);\n    }\n\n    // Method to draw the converter UI\n    public void drawPrintSummaryUI() {\n\n        // Shadow properties\n        parent.fill(0, 0, 0, 50);\n        parent.noStroke();\n        parent.rect(rectX - shadowOffset, rectY - shadowOffset, rectW + 2 * shadowOffset, rectH + 2 * shadowOffset, cornerRadius + 5);\n\n        // Main rectangle properties\n        parent.fill(255,249,254);\n        parent.noStroke();\n\n        // Draw the main rounded rectangle\n        parent.rect(rectX, rectY, rectW, rectH, cornerRadius);\n\n        // Long rectangle header\n        parent.fill(220, 202, 216);\n        parent.noStroke();\n        parent.rect(rectX, rectY+30, rectW, 30);\n        parent.rect(rectX, rectY, rectW, 60, cornerRadius);\n\n        // Get mouse hover status\n        boolean isHovering = isMouseOverButton(775, 350, 100, 40);\n\n        // Change the color based on hover\n        if (isHovering) {\n            System.out.println(\"Mouse is hovering over 'Print' button\");\n            parent.fill(222, 37, 176, 200);\n        } else {\n            parent.fill(222, 37, 176); // Default color\n        }\n\n        // Draw the button after setting the fill color\n        parent.noStroke();\n        parent.rect(775, 350, 100, 40, cornerRadius);\n        // Draw the button text\n        parent.textSize(16);\n        parent.fill(255);\n        parent.text(\"Print\", 807, 375);\n\n        // Draw the 1st currency box\n        if (firstCurrencyBox) {\n            parent.fill(220, 202, 216);\n        } else {\n            parent.noFill();\n        }\n        parent.stroke(0);\n        parent.rect(80, 250, 200, 40, cornerRadius);\n\n        parent.image(dropdownFirst, 250, 265);\n\n        // Draw the 2nd currency box\n        if (secondCurrencyBox) {\n            parent.fill(220, 202, 216);\n        } else {\n            parent.noFill();\n        }\n        parent.stroke(0);\n        parent.rect(325, 250, 200, 40, cornerRadius);\n\n        parent.image(dropdownSecond, 495, 265);\n\n        parent.textSize(12);\n        parent.fill(0);\n        parent.text(\"Currencies\", 90, 245);\n\n        if (startDateBox) {\n            parent.fill(220, 202, 216);\n        } else {\n            parent.noFill();\n        }\n        parent.stroke(0);\n        parent.rect(80, 325, 200, 40, cornerRadius);\n        parent.fill(0);\n        parent.textSize(12);\n        parent.text(\"Start Date\", 90, 320);\n        parent.textSize(16);\n        parent.text(enteredStartDate, 90, 350);\n\n        if (endDateBox) {\n            parent.fill(220, 202, 216);\n        } else {\n            parent.noFill();\n        }\n        parent.stroke(0);\n        parent.rect(325, 325, 200, 40, cornerRadius);\n        parent.fill(0);\n        parent.textSize(12);\n        parent.text(\"End Date\", 330, 320);\n        parent.textSize(16);\n        parent.text(enteredEndDate, 330, 350);\n\n\n        // Draw the flag for 1st currency\n        flagManager.drawFlag(selectedFirstCurrency, 90, 263);\n        // Draw the flag for 2nd currency\n        flagManager.drawFlag(selectedSecondCurrency, 335, 263);\n\n        // Draw selected currencies\n        parent.textSize(16);\n        parent.text(selectedFirstCurrencyText, 120, 277);\n        parent.text(selectedSecondCurrencyText, 365, 277);\n\n        firstDropdown.draw();\n        secondDropdown.draw();\n        parent.textSize(16);\n    }\n\n    private boolean isMouseOverButton(int x, int y, int w, int h) {\n        return (parent.mouseX > x && parent.mouseX < x + w &&\n                parent.mouseY > y && parent.mouseY < y + h);\n    }\n\n    // Method to handle mouse presses\n    public void mousePressed() {\n\n        // Check if the 1st currency box is clicked\n        if (isMouseOverButton(80, 250, 200, 40)) {\n            firstCurrencyBox = true;\n            secondCurrencyBox = false;\n            startDateBox = false;\n            endDateBox = false;\n//            secondDropdown.expanded = false;\n\n        }\n        else if (isMouseOverButton(325, 250, 200, 40)) {\n            firstCurrencyBox = false;\n            secondCurrencyBox = true;\n            startDateBox = false;\n            endDateBox = false;\n//            firstDropdown.expanded = false;\n        }\n        else if (isMouseOverButton(80, 325, 200, 40)) {\n            firstCurrencyBox = false;\n            secondCurrencyBox = false;\n            startDateBox = true;\n            endDateBox = false;\n        }\n        else if (isMouseOverButton(325, 325, 200, 40)) {\n            firstCurrencyBox = false;\n            secondCurrencyBox = false;\n            startDateBox = false;\n            endDateBox = true;\n        }\n        else if (isMouseOverButton(775, 350, 100, 40)) {\n            generateSummary();\n        }\n\n        // Handle dropdown interactions\n        firstDropdown.mousePressed();\n        secondDropdown.mousePressed();\n\n        if (!firstDropdown.expanded && firstDropdown.getSelectedItem() != null &&\n                !selectedFirstCurrencyText.equals(firstDropdown.getSelectedItem())) {\n            selectedFirstCurrencyText = firstDropdown.getSelectedItem();\n            selectedFirstCurrency = selectedFirstCurrencyText.split(\" \")[0];\n//            System.out.println(\"First currency updated to: \" + selectedFirstCurrencyText);  // Debugging print\n        }\n\n        // Check for \"To\" dropdown and update\n        if (!secondDropdown.expanded && secondDropdown.getSelectedItem() != null &&\n                !selectedSecondCurrency.equals(secondDropdown.getSelectedItem())) {\n            selectedSecondCurrencyText = secondDropdown.getSelectedItem();\n            selectedSecondCurrency = selectedSecondCurrencyText.split(\" \")[0];\n//            System.out.println(\"Second currency updated to: \" + selectedSecondCurrencyText);  // Debugging print\n        }\n    }\n\n    public void keyPressed () {\n        if (startDateBox) {\n            handleDateInput(true);\n        } else if (endDateBox) {\n            handleDateInput(false);\n        }\n    }\n\n\n    private void handleDateInput(boolean isStartDate) {\n        char key = parent.key;\n        if (Character.isDigit(key) || key == '-') {\n            if (isStartDate) {\n                enteredStartDate += key;\n            } else {\n                enteredEndDate += key;\n            }\n        }\n        if (key == PApplet.BACKSPACE) {\n            if (isStartDate && enteredStartDate.length() > 0) {\n                enteredStartDate = enteredStartDate.substring(0, enteredStartDate.length() - 1);\n            } else if (!isStartDate && enteredEndDate.length() > 0) {\n                enteredEndDate = enteredEndDate.substring(0, enteredEndDate.length() - 1);\n            }\n        }\n    }\n\n    // Method to generate the exchange rate summary PDF\n    private void generateSummary() {\n        try {\n            // Parse start and end dates from the UI\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            LocalDate startDate = LocalDate.parse(enteredStartDate, formatter);\n            LocalDate endDate = LocalDate.parse(enteredEndDate, formatter);\n\n            // Generate the exchange rate summary PDF\n            currencyManager.generateExchangeRateSummaryPDF(selectedFirstCurrency, selectedSecondCurrency, startDate, endDate);\n            System.out.println(\"PDF summary generated for: \" + selectedFirstCurrency + \" to \" + selectedSecondCurrency);\n        } catch (Exception e) {\n            System.out.println(\"Error generating PDF summary: \" + e.getMessage());\n        }\n    }\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/CurrencyExchange/PrintSummaryUI.java b/app/src/main/java/CurrencyExchange/PrintSummaryUI.java
--- a/app/src/main/java/CurrencyExchange/PrintSummaryUI.java	
+++ b/app/src/main/java/CurrencyExchange/PrintSummaryUI.java	
@@ -5,8 +5,16 @@
 
 import CurrencyExchange.Users.Dropdown;
 import CurrencyExchange.Users.CurrencyManager;
+
+import java.io.File;
+import java.io.FileWriter;
+import java.io.IOException;
 import java.time.LocalDate;
 import java.time.format.DateTimeFormatter;
+import java.time.format.DateTimeParseException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.awt.Desktop;
 
 public class PrintSummaryUI {
     PApplet parent;
@@ -52,10 +60,18 @@
     String enteredStartDate = ""; // User input for start date
     String enteredEndDate = "";
 
+    private ExecutorService executor;
+    private boolean isPdfGenerating = false;
+    private boolean isPdfGenerated = false;
+
+    private File generatedPDFFile;
+    private boolean pdfGenerated = false;
+
     // Constructor receives the PApplet instance
     public PrintSummaryUI(PApplet parent, CurrencyManager currencyManager) {
         this.parent = parent;
         this.currencyManager = currencyManager;
+        this.executor = Executors.newSingleThreadExecutor();
         flagManager = new Flag(parent);
 
         // Load flags for selected currencies
@@ -180,7 +196,6 @@
         parent.textSize(16);
         parent.text(enteredEndDate, 330, 350);
 
-
         // Draw the flag for 1st currency
         flagManager.drawFlag(selectedFirstCurrency, 90, 263);
         // Draw the flag for 2nd currency
@@ -194,6 +209,14 @@
         firstDropdown.draw();
         secondDropdown.draw();
         parent.textSize(16);
+
+        // Add "Open PDF" button if a PDF has been generated
+        if (pdfGenerated && generatedPDFFile != null && generatedPDFFile.exists()) {
+            if (drawButton("Open PDF", 775, 400, 100, 40)) {
+                openPDFFile(generatedPDFFile);
+            }
+        }
+
     }
 
     private boolean isMouseOverButton(int x, int y, int w, int h) {
@@ -283,21 +306,117 @@
         }
     }
 
-    // Method to generate the exchange rate summary PDF
     private void generateSummary() {
+        System.out.println("Attempting to generate summary...");
+
+        if (selectedFirstCurrency == null || selectedSecondCurrency == null) {
+            System.out.println("Error: Currencies not selected");
+            return;
+        }
+
+        if (enteredStartDate.isEmpty() || enteredEndDate.isEmpty()) {
+            System.out.println("Error: Date range not entered");
+            return;
+        }
+
+
+        try {
+            String testFilePath = "app/src/main/java/CurrencyExchange/Users/PDFSummary/test.txt";
+            File testFile = new File(testFilePath);
+            FileWriter writer = new FileWriter(testFile);
+            writer.write("Test file writing");
+            writer.close();
+            System.out.println("Test file created at: " + testFile.getAbsolutePath());
+        } catch (IOException e) {
+            System.out.println("Error creating test file: " + e.getMessage());
+            e.printStackTrace();
+        }
+
         try {
-            // Parse start and end dates from the UI
             DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
             LocalDate startDate = LocalDate.parse(enteredStartDate, formatter);
             LocalDate endDate = LocalDate.parse(enteredEndDate, formatter);
 
-            // Generate the exchange rate summary PDF
-            currencyManager.generateExchangeRateSummaryPDF(selectedFirstCurrency, selectedSecondCurrency, startDate, endDate);
-            System.out.println("PDF summary generated for: " + selectedFirstCurrency + " to " + selectedSecondCurrency);
+            if (endDate.isBefore(startDate)) {
+                System.out.println("Error: End date is before start date");
+                return;
+            }
+
+            isPdfGenerating = true;
+            isPdfGenerated = false;
+
+            executor.submit(() -> {
+                try {
+                    currencyManager.generateExchangeRateSummaryPDF(selectedFirstCurrency, selectedSecondCurrency, startDate, endDate);
+                    isPdfGenerated = true;
+                } catch (Exception e) {
+                    System.out.println("Error generating PDF summary: " + e.getMessage());
+                    e.printStackTrace();
+                } finally {
+                    isPdfGenerating = false;
+                }
+            });
+
+        } catch (DateTimeParseException e) {
+            System.out.println("Error parsing dates: " + e.getMessage());
+        }
+
+        try {
+            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
+            LocalDate startDate = LocalDate.parse(enteredStartDate, formatter);
+            LocalDate endDate = LocalDate.parse(enteredEndDate, formatter);
+
+            String pdfPath = currencyManager.generateExchangeRateSummaryPDF(selectedFirstCurrency, selectedSecondCurrency, startDate, endDate);
+            if (pdfPath != null) {
+                generatedPDFFile = new File(pdfPath);
+                pdfGenerated = true;
+                System.out.println("PDF summary generated for: " + selectedFirstCurrency + " to " + selectedSecondCurrency);
+            } else {
+                System.out.println("Failed to generate PDF summary.");
+                pdfGenerated = false;
+            }
         } catch (Exception e) {
             System.out.println("Error generating PDF summary: " + e.getMessage());
+            e.printStackTrace();
+            pdfGenerated = false;
+        }
+    }
+
+    private boolean drawButton(String label, int x, int y, int w, int h) {
+        parent.fill(222, 37, 176);
+        parent.rect(x, y, w, h, 10);
+        parent.fill(255);
+        parent.textAlign(PApplet.CENTER, PApplet.CENTER);
+        parent.text(label, x + w/2, y + h/2);
+        return parent.mousePressed && parent.mouseX > x && parent.mouseX < x + w && parent.mouseY > y && parent.mouseY < y + h;
+    }
+
+    private void openPDFFile(File file) {
+        try {
+            if (Desktop.isDesktopSupported()) {
+                Desktop desktop = Desktop.getDesktop();
+                if (desktop.isSupported(Desktop.Action.OPEN)) {
+                    desktop.open(file);
+                } else {
+                    System.out.println("Opening files is not supported on this platform");
+                }
+            } else {
+                System.out.println("Desktop is not supported on this platform");
+            }
+        } catch (IOException e) {
+            System.out.println("Error opening PDF file: " + e.getMessage());
+            e.printStackTrace();
         }
     }
+
 
 }
 
+
+
+
+
+
+
+
+
Index: app/src/main/java/CurrencyExchange/Users/CurrencyManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package CurrencyExchange.Users;\n\n\nimport CurrencyExchange.FileHandlers.Database;\nimport CurrencyExchange.FileHandlers.Json;\n\nimport java.io.*;\nimport java.nio.file.*;\nimport java.time.LocalDate;\nimport java.time.LocalDateTime;\nimport java.time.format.DateTimeFormatter;\nimport java.util.*;\nimport CurrencyExchange.FileHandlers.Database.ExchangeRateEntry;\nimport java.time.LocalDate;\nimport java.util.stream.Collectors;\n//import java.util.stream.Collectors;\n\n\nimport com.itextpdf.text.Document;\nimport com.itextpdf.text.Paragraph;\nimport com.itextpdf.text.Phrase;\nimport com.itextpdf.text.Element;\nimport com.itextpdf.text.Font;\nimport com.itextpdf.text.Chunk;\nimport com.itextpdf.text.pdf.PdfWriter;\nimport com.itextpdf.text.pdf.PdfPTable;\n\n\n// Currency manager class\npublic class CurrencyManager {\n    private Database database;\n    private Json jsonHandler;\n    public List<String> popularCurrencies;\n\n    public CurrencyManager(Database database, Json jsonHandler) {\n        this.database = database;\n        this.jsonHandler = jsonHandler;\n        this.popularCurrencies = new ArrayList<>(Arrays.asList(\"AUD\", \"USD\", \"GBP\", \"JPY\"));\n        database.initialiseDatabase();\n    }\n\n//    public void addExchangeRate(String currency, double rate, LocalDate date) {\n//        database.updateRate(currency, rate);\n//    }\n\n    public void addExchangeRates(Map<String, Double> currencyRates) {\n        database.updateRates(currencyRates);\n        System.out.println(\"Exchange rates updated successfully.\");\n        displayPopularCurrencies();  // Show the updated rates\n    }\n\n    public void addNewCurrency(String currency) {\n        database.addCountry(currency);\n        //List<String> allCurrencies = database.getAllCurrencies();\n        //setPopularCurrencies(allCurrencies);  // Update the list of popular currencies\n    }\n\n    public void setPopularCurrencies(List<String> currencies) {\n        if (currencies.size() != 4) {\n            throw new IllegalArgumentException(\"Exactly 4 popular currencies must be set.\");\n        }\n        this.popularCurrencies = new ArrayList<>(currencies);\n    }\n\n    public double convertCurrency(double amount, String fromCurrency, String toCurrency) {\n        double fromRate = database.getLastExchangeRate(fromCurrency);\n        double toRate = database.getLastExchangeRate(toCurrency);\n        return Math.abs(amount * (toRate / fromRate));\n    }\n\n    public double getLastExchangeRate(String currency) {\n        return database.getLastExchangeRate(currency);\n    }\n\n    public void displayPopularCurrencies() {\n        System.out.println(\"\\nPopular Currencies Exchange Rates:\");\n        System.out.printf(\"%-6s\", \"From/To\");\n        for (String currency : popularCurrencies) {\n            System.out.printf(\"%-10s\", currency);\n        }\n        System.out.println();\n\n        for (String fromCurrency : popularCurrencies) {\n            System.out.printf(\"%-6s\", fromCurrency);\n            for (String toCurrency : popularCurrencies) {\n                if (fromCurrency.equals(toCurrency)) {\n                    System.out.printf(\"%-10s\", \"-\");\n                } else {\n                    double rate = convertCurrency(1, fromCurrency, toCurrency);\n                    String symbol = jsonHandler.getSymbol(toCurrency);\n                    System.out.printf(\"%-10s\", String.format(\"%.2f %s\", rate, symbol));\n                }\n            }\n            System.out.println();\n        }\n    }\n\n\n    public void addCountryData(String country, String flagFilePath, String symbol) {\n        jsonHandler.addCountry(country, flagFilePath, symbol);\n    }\n\n    public void updateCountryFlag(String country, String flagFilePath) {\n        jsonHandler.updateFlag(country, flagFilePath);\n    }\n\n    public void updateCountrySymbol(String country, String symbol) {\n        jsonHandler.updateSymbol(country, symbol);\n    }\n\n    public String getCountryFlag(String country) {\n        return jsonHandler.getFlag(country);\n    }\n\n    public String getCountrySymbol(String country) {\n        return jsonHandler.getSymbol(country);\n    }\n\n    public void printAllRecords() {\n        // database.printAllRecords();\n    }\n\n\n    public ExchangeRateSummary getExchangeRateSummary(String currency1, String currency2, LocalDate startDate, LocalDate endDate) {\n        List<Database.ExchangeRateEntry> historicalRates = database.getHistoricalRates(currency1, currency2, startDate, endDate);\n\n        if (historicalRates.isEmpty()) {\n            return null; // or throw an exception\n        }\n\n        List<Double> rates = historicalRates.stream().mapToDouble(entry -> entry.rate).sorted().boxed().collect(Collectors.toList());\n        int size = rates.size();\n\n        double min = rates.get(0);\n        double max = rates.get(size - 1);\n        double sum = rates.stream().mapToDouble(Double::doubleValue).sum();\n        double average = sum / size;\n\n        double median;\n        if (size % 2 == 0) {\n            median = (rates.get(size / 2 - 1) + rates.get(size / 2)) / 2.0;\n        } else {\n            median = rates.get(size / 2);\n        }\n\n        double variance = rates.stream().mapToDouble(rate -> Math.pow(rate - average, 2)).sum() / size;\n        double standardDeviation = Math.sqrt(variance);\n\n        return new ExchangeRateSummary(\n                historicalRates,\n                min,\n                max,\n                average,\n                median,\n                standardDeviation\n        );\n    }\n\n    public static class ExchangeRateSummary {\n        public List<Database.ExchangeRateEntry> allRates;\n        public double minimum;\n        public double maximum;\n        public double average;\n        public double median;\n        public double standardDeviation;\n\n        public ExchangeRateSummary(List<ExchangeRateEntry> allRates, double minimum, double maximum,\n                                   double average, double median, double standardDeviation) {\n            this.allRates = allRates;\n            this.minimum = minimum;\n            this.maximum = maximum;\n            this.average = average;\n            this.median = median;\n            this.standardDeviation = standardDeviation;\n        }\n    }\n\n    public void generateExchangeRateSummaryPDF(String currency1, String currency2, LocalDate startDate, LocalDate endDate) {\n        ExchangeRateSummary summary = getExchangeRateSummary(currency1, currency2, startDate, endDate);\n\n        if (summary == null || summary.allRates.isEmpty()) {\n            System.out.println(\"No data available for the specified period and currencies.\");\n            return;\n        }\n\n        String fileName = String.format(\"%s-%s_%s_to_%s_Summary.pdf\",\n                currency1, currency2,\n                startDate.toString(), endDate.toString());\n        String folderPath = \"app/src/main/java/CurrencyExchange/Users/PDFSummary\";\n        String filePath = folderPath + File.separator + fileName;\n\n        // Ensure the summaries folder exists\n        try {\n            Files.createDirectories(Paths.get(folderPath));\n        } catch (Exception e) {\n            System.out.println(\"Error creating summaries folder: \" + e.getMessage());\n            return;\n        }\n\n        Document document = new Document();\n        try {\n            PdfWriter.getInstance(document, new FileOutputStream(filePath));\n            document.open();\n\n            Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);\n            Font headingFont = new Font(Font.FontFamily.HELVETICA, 14, Font.BOLD);\n            Font normalFont = new Font(Font.FontFamily.HELVETICA, 12, Font.NORMAL);\n\n            // Title\n            Paragraph title = new Paragraph(\"Exchange Rate Summary\", titleFont);\n            title.setAlignment(Element.ALIGN_CENTER);\n            document.add(title);\n            document.add(Chunk.NEWLINE);\n\n            // Currency and Date Range\n            document.add(new Paragraph(\"From: \" + currency1 + \" To: \" + currency2, headingFont));\n            document.add(new Paragraph(\"Period: \" + startDate + \" to \" + endDate, headingFont));\n            document.add(Chunk.NEWLINE);\n\n            // Summary Statistics Table\n            PdfPTable statsTable = new PdfPTable(2);\n            statsTable.setWidthPercentage(100);\n            addRowToTable(statsTable, \"Statistic\", \"Value\", headingFont);\n            addRowToTable(statsTable, \"Minimum\", String.format(\"%.4f\", summary.minimum), normalFont);\n            addRowToTable(statsTable, \"Maximum\", String.format(\"%.4f\", summary.maximum), normalFont);\n            addRowToTable(statsTable, \"Average\", String.format(\"%.4f\", summary.average), normalFont);\n            addRowToTable(statsTable, \"Median\", String.format(\"%.4f\", summary.median), normalFont);\n            addRowToTable(statsTable, \"Standard Deviation\", String.format(\"%.4f\", summary.standardDeviation), normalFont);\n            document.add(statsTable);\n            document.add(Chunk.NEWLINE);\n\n            // All Rates Table\n            document.add(new Paragraph(\"All Rates:\", headingFont));\n            PdfPTable ratesTable = new PdfPTable(2);\n            ratesTable.setWidthPercentage(100);\n            addRowToTable(ratesTable, \"Date\", \"Rate\", headingFont);\n\n            DateTimeFormatter formatter = DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");\n            for (Database.ExchangeRateEntry entry : summary.allRates) {\n                addRowToTable(ratesTable, entry.date.format(formatter), String.format(\"%.4f\", entry.rate), normalFont);\n            }\n            document.add(ratesTable);\n\n        } catch (Exception e) {\n            System.out.println(\"Error generating PDF: \" + e.getMessage());\n            e.printStackTrace();\n        } finally {\n            document.close();\n        }\n\n        System.out.println(\"PDF generated successfully: \" + filePath);\n    }\n\n    private void addRowToTable(PdfPTable table, String key, String value, Font font) {\n        table.addCell(new Phrase(key, font));\n        table.addCell(new Phrase(value, font));\n    }\n\n\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/CurrencyExchange/Users/CurrencyManager.java b/app/src/main/java/CurrencyExchange/Users/CurrencyManager.java
--- a/app/src/main/java/CurrencyExchange/Users/CurrencyManager.java	
+++ b/app/src/main/java/CurrencyExchange/Users/CurrencyManager.java	
@@ -15,7 +15,7 @@
 import java.util.stream.Collectors;
 //import java.util.stream.Collectors;
 
-
+import java.awt.Desktop;
 import com.itextpdf.text.Document;
 import com.itextpdf.text.Paragraph;
 import com.itextpdf.text.Phrase;
@@ -117,7 +117,7 @@
     }
 
     public void printAllRecords() {
-        // database.printAllRecords();
+        database.printAllRecords();
     }
 
 
@@ -175,12 +175,12 @@
         }
     }
 
-    public void generateExchangeRateSummaryPDF(String currency1, String currency2, LocalDate startDate, LocalDate endDate) {
+    public String generateExchangeRateSummaryPDF(String currency1, String currency2, LocalDate startDate, LocalDate endDate) {
         ExchangeRateSummary summary = getExchangeRateSummary(currency1, currency2, startDate, endDate);
 
         if (summary == null || summary.allRates.isEmpty()) {
             System.out.println("No data available for the specified period and currencies.");
-            return;
+            return null;
         }
 
         String fileName = String.format("%s-%s_%s_to_%s_Summary.pdf",
@@ -189,17 +189,21 @@
         String folderPath = "app/src/main/java/CurrencyExchange/Users/PDFSummary";
         String filePath = folderPath + File.separator + fileName;
 
+        File pdfFile = new File(filePath);
+        System.out.println("Attempting to generate PDF at: " + pdfFile.getAbsolutePath());
+
         // Ensure the summaries folder exists
         try {
             Files.createDirectories(Paths.get(folderPath));
         } catch (Exception e) {
             System.out.println("Error creating summaries folder: " + e.getMessage());
-            return;
+            return null;
         }
 
         Document document = new Document();
+        PdfWriter writer = null;
         try {
-            PdfWriter.getInstance(document, new FileOutputStream(filePath));
+            writer = PdfWriter.getInstance(document, new FileOutputStream(filePath));
             document.open();
 
             Font titleFont = new Font(Font.FontFamily.HELVETICA, 18, Font.BOLD);
@@ -241,21 +245,51 @@
             }
             document.add(ratesTable);
 
+            System.out.println("PDF content added successfully.");
+
         } catch (Exception e) {
             System.out.println("Error generating PDF: " + e.getMessage());
             e.printStackTrace();
+            return null;
         } finally {
-            document.close();
+            if (document != null && document.isOpen()) {
+                document.close();
+            }
+            if (writer != null) {
+                writer.close();
+            }
         }
 
-        System.out.println("PDF generated successfully: " + filePath);
+        if (pdfFile.exists() && pdfFile.length() > 0) {
+            System.out.println("PDF generated successfully: " + pdfFile.getAbsolutePath());
+            return pdfFile.getAbsolutePath();
+        } else {
+            System.out.println("Failed to create PDF file or file is empty: " + pdfFile.getAbsolutePath());
+            return null;
+        }
     }
 
     private void addRowToTable(PdfPTable table, String key, String value, Font font) {
         table.addCell(new Phrase(key, font));
         table.addCell(new Phrase(value, font));
     }
+    private void openPDFFile(File file) {
+        try {
+            if (Desktop.isDesktopSupported()) {
+                Desktop desktop = Desktop.getDesktop();
+                if (desktop.isSupported(Desktop.Action.OPEN)) {
+                    desktop.open(file);
+                } else {
+                    System.out.println("Opening files is not supported on this platform");
+                }
+            } else {
+                System.out.println("Desktop is not supported on this platform");
+            }
+        } catch (IOException e) {
+            System.out.println("Error opening PDF file: " + e.getMessage());
+            e.printStackTrace();
+        }
+    }
 
 
-
-}
\ No newline at end of file
+}
